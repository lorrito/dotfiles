{"autosize":{"prefix":"autosize","body":["\/\/ text area auto-resizer based on value & scroll","export default function useAutosizeTextArea(","  areaRef: HTMLTextAreaElement | null,","  value: string,",") {","  useEffect(() => {","    if (areaRef) {","      areaRef.style.height = \"0\";","      const scrollHeight = areaRef.scrollHeight;","      areaRef.style.height = scrollHeight + \"px\";","    }","  }, [areaRef, value]);","}"]},"reqres":{"prefix":"reqres","body":"req: Request, res: Response"},"404":{"prefix":"404","body":["app.use(function (req: Request, res: Response, next: NextFunction) {","  res.status(404).json({ error: \"Not found\" });","  return;","});"]},"reqresn":{"prefix":"reqresn","body":"req: Request, res: Response, next: NextFunction"},"app":{"prefix":"app","body":["import express from \"express\"","import helmet from \"helmet\"","import dotenv from \"dotenv\"","import cors from \"cors\"","","dotenv.config()","const app = express()","","app.use(helmet());","app.use(cors());","app.use(express.json())"]},"jwheader":{"prefix":"jwheader","body":["\/\/ prettier-ignore","function authenticateToken(req: Request, res: Response, next: NextFunction): any {","  const authHeader = req.headers[\"authorization\"]","  const token = authHeader && authHeader.split(\" \")[1]","}"]},"prism":{"prefix":"prism","body":["import { PrismaClient } from \"@prisma\/client\";","","const prisma = new PrismaClient();","","async function main() {","  \/\/ ... you will write your Prisma Client queries here","}","","main()","  .then(async () => {","    await prisma.\\$disconnect();","  })","  .catch(async (e) => {","    console.error(e);","    await prisma.\\$disconnect();","    process.exit(1);","  });"]},"expdef":{"prefix":"expdef","body":["import express, { Request, Response, NextFunction } from \"express\";","import helmet from \"helmet\";","","const app = express();","app.use(helmet());","app.disable(\"x-powered-by\");","app.use(express.json());","","const port = process.env.PORT;","","app.use((req: Request, res: Response, next: NextFunction) => {","  res.status(404).send(\"Page not found\");","});","","app.listen(port, () => {","  console.log(\"app listening on port 3000\");","});"]},"ensauth":{"prefix":"ensauth","body":["export async function ensureAuthentication(","  req: Request,","  res: Response,","  next: NextFunction,",") {","  try {","    const token = req.headers.authorization?.split(\" \")[1];","    if (!token) {","      throw new Error();","    }","","    verify(","      token,","      jwt_secret as string,","      (err: VerifyErrors | null, decoded: JwtPayload | string | undefined) => {","        if (err) {","          throw new Error();","        }","        return next();","      },","    );","  } catch (err) {","    res.status(401).json({ error: \"authentication failed\" });","  }","}"]},"cors":{"prefix":"cors","body":["const corOptions = {","  origin: \"http:\/\/localhost:3000\",","  optionSuccessStatus: 200,","};"]}}